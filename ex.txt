import numpy as np

# Définition des valeurs d'appartenance pour la vitesse
def speed_membership(speed):
    return {
        "VERY_FAST": max(0, min((speed - 100) / 40, 1)),  # 100 - 140
        "FAST": max(0, min((120 - speed) / 60, (speed - 60) / 60)),  # 60 - 120
        "MEDIUM_FAST": max(0, min((speed - 40) / 30, (70 - speed) / 30)),  # 40 - 70
        "MEDIUM": max(0, min((speed - 10) / 40, (50 - speed) / 40)),  # 10 - 50
        "SLOW": max(0, min((speed - 2) / 13, (15 - speed) / 13)),  # 2 - 15
        "VERY_SLOW": max(0, min((speed - 0) / 4, (4 - speed) / 4)),  # 0 - 4
        "STOPPED": 1 if speed == 0 else 0  # 0 km/h
    }

# Définition des valeurs d'appartenance pour la distance
def distance_membership(distance):
    return {
        "VERY_FAR": 1 if distance >= 5000 else 0,
        "FAR": max(0, min((distance - 3000) / 2000, (6000 - distance) / 1000)),  # 3000 - 6000
        "MEDIUM_FAR": max(0, min((distance - 1000) / 2500, (3500 - distance) / 2500)),  # 1000 - 3500
        "MEDIUM": max(0, min((distance - 100) / 1900, (2000 - distance) / 1900)),  # 100 - 2000
        "NEAR": max(0, min((distance - 5) / 95, (100 - distance) / 95)),  # 5 - 100
        "VERY_NEAR": max(0, min((distance - 0) / 10, (10 - distance) / 10)),  # 0 - 10
        "AT": 1 if distance <= 1 else 0  # 0 - 1
    }

# Définition des règles de contrôle
def control_rules(speed, distance):
    speed_mf = speed_membership(speed)
    distance_mf = distance_membership(distance)

    # Activation des règles
    brake_activation = {
        "FULL_BRAKE": min(speed_mf["STOPPED"], distance_mf["AT"]),
        "STRONG_BRAKE": min(speed_mf["VERY_SLOW"], distance_mf["VERY_NEAR"]),
        "MEDIUM_BRAKE": min(speed_mf["SLOW"], distance_mf["MEDIUM"]),
        "SLIGHT_BRAKE": min(speed_mf["MEDIUM"], distance_mf["NEAR"]),
        "NO_BRAKE": max(speed_mf["FAST"], speed_mf["MEDIUM_FAST"]),
        "FULL_THROTTLE": max(speed_mf["VERY_FAST"], speed_mf["FAST"]),
    }

    return brake_activation

# Défuzzification
def defuzzify(brake_activation):
    output_values = {
        "FULL_BRAKE": (80, 100),
        "STRONG_BRAKE": (60, 85),
        "MEDIUM_BRAKE": (40, 70),
        "SLIGHT_BRAKE": (20, 50),
        "NO_BRAKE": (0, 0),
        "FULL_THROTTLE": (0, 0)
    }

    weighted_sum = 0
    total_weight = 0

    for rule, activation in brake_activation.items():
        if activation > 0:
            low, high = output_values[rule]
            centroid = (low + high) / 2
            weighted_sum += centroid * activation
            total_weight += activation

    if total_weight == 0:
        return 0  # Pas de freinage
    else:
        return weighted_sum / total_weight

# Fonction principale pour analyser les scénarios
def analyze_scenarios(scenarios):
    for speed, distance in scenarios:
        print(f"Analyzing for Speed: {speed} km/h and Distance: {distance} m")
        brake_activation = control_rules(speed, distance)
        brake_percentage = defuzzify(brake_activation)
        print(f"Recommended Brake Percentage: {brake_percentage:.2f}%\n")

# Scénarios d'analyse
scenarios = [
    (45, 2500),
    (0.9, 2500),
    (3, 150),
    (12.5, 150)
]

# Lancement de l'analyse
analyze_scenarios(scenarios)
